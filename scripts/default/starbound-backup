#!/bin/bash
. "$(dirname "$0")/common"
. "$(dirname "$0")/defaults"

pidfile=$starbound_backup_pidfile
save_dir=""
backup_dir=""

main() {
  info "Running starbound-backup"
  prepareBackup
  info "starbound-backup complete"
}

prepareBackup() {
  if [ -f "$pidfile" ]; then
    info "Found existing PID file - checking process"
    checkLock $pidfile
  fi

  getSaveDir
  getBackupDir

  if [ ! -d "$save_dir" ]; then
    warn "Save directory '$save_dir' not found - aborting backup"
    return
  fi

  trap shutdown SIGINT SIGTERM

  backupAndCleanup &
  starbound_backup_pid=$!
  echo $starbound_backup_pid >"$pidfile"
  wait $starbound_backup_pid
}

backupAndCleanup() {
  backup
  cleanup
  backupPostHook
  clearLock "$pidfile"
}

backup() {
  local backup_file_name
  info "Beginning backup routine for $save_dir"

  backupPreHook

  # Add context to backup-file name if OpenStarbound is enabled
  if [[ "$USE_OPENSTARBOUND" == "true" ]]; then
    openstarbound_backup_suffix="_openstarbound"
  else
    openstarbound_backup_suffix=""
  fi

  backup_file_name="$(date +%Y-%m-%d_%H-%M-%S)-$(basename "$save_dir")${openstarbound_backup_suffix}.zip"
  info "Backing up $save_dir to $backup_dir/$backup_file_name"
  zip -r "$backup_dir/$backup_file_name" "$save_dir"
}

cleanup() {
  debug "run cleanup"

  # skip if BACKUP_MAX_COUNT is not set or is 0
  if [ -z "$BACKUP_MAX_COUNT" ] || [ "$BACKUP_MAX_COUNT" -eq 0 ]; then
    warn "Skipping cleanup - BACKUP_MAX_COUNT is not set or is 0 (infinite)"
    return
  fi

  info "Removing old backups with number of backups set to $BACKUP_MAX_COUNT"
  find "$backup_dir" -type f -printf '%T@ %p\n' | sort -n | cut -d' ' -f 2- | head -n -$BACKUP_MAX_COUNT | xargs rm -fv
}

getSaveDir() {
  # If 'savefile_path' starts with '/' then consider it an absolute path; use it verbatim
  if [[ "$savefile_path" == /* ]]; then
    save_dir="$savefile_path"
  else
    save_dir="$install_path/$savefile_path"
  fi
}

getBackupDir() {
  if [[ "$BACKUP_DIR" == /* ]]; then
    backup_dir="$BACKUP_DIR"
  else
    backup_dir="$install_path/$BACKUP_DIR"
  fi
}

backupPreHook() {
  if [ -n "$BACKUP_PRE_HOOK" ]; then
    info "Running update post hook: $BACKUP_PRE_HOOK"
    eval "$BACKUP_PRE_HOOK"
  fi
}

backupPostHook() {
  if [ -n "$BACKUP_POST_HOOK" ]; then
    info "Running update post hook: $BACKUP_POST_HOOK"
    eval "$BACKUP_POST_HOOK"
  fi
}

shutdown() {
  debug "Received signal to shut down starbound-backup"
  clearLock "$pidfile"
}

main
