#!/bin/bash
. "$(dirname "$0")/common"
. "$(dirname "$0")/defaults"
. "$(dirname "$0")/openstarbound-updater-shared"

main() {
  info "Running openstarbound-updater"
  updateOpenStarbound
  info "openstarbound-updater complete"
}

downloadOpenStarbound() {
  info "Downloading OpenStarbound version $openstarbound_latest_version"

  # Create OpenStarbound download directory
  mkdir -p "$openstarbound_download_path"

  # Create OpenStarbound staging directory
  mkdir -p "$openstarbound_staging_path"
  
  # Get download URL for the OpenStarbound Linux Server asset
  local openstarbound_download_url
  openstarbound_download_url=$(curl -sX GET "$openstarbound_github_api" | jq -r '.assets[] | select((.name | test("linux"; "i")) and (.name | test("server"; "i"))) | .browser_download_url')

  if [ -z "$openstarbound_download_url" ] || [ "$openstarbound_download_url" == "null" ]; then
    error "Failed to get download URL for OpenStarbound Linux Server"
    return 1
  fi
  
  # Download OpenStarbound Linux Server asset and extract
  local openstarbound_archive_path="$openstarbound_download_path/OpenStarbound-Linux-Server.zip"
  curl -sL "$openstarbound_download_url" -o "$openstarbound_archive_path"
  
  if [ ! -f "$openstarbound_archive_path" ]; then
    error "Failed to download OpenStarbound Linux Server asset"
    return 1
  fi
  
  # Extract the downloaded OpenStarbound Linux Server asset
  info "Extracting OpenStarbound Linux Server asset..."
  tar -xzf "$openstarbound_archive_path" -C "$openstarbound_staging_path"

  # Remove the recently downloaded OpenStarbound Linux Server asset
  info "Cleaning up OpenStarbound download directory..."
  find "$openstarbound_download_path" -type f \( -iname '*linux*' -iname '*server*' \) -exec rm -f {} +

  info "OpenStarbound downloaded to staging directory"
  return 0
}

installOpenStarbound() {
  info "Installing OpenStarbound Linux Server version $openstarbound_latest_version ..."
  
  # Check if the required OpenStarbound files exist
  if [ ! -f "$openstarbound_staging_path/server_distribution/linux/btree_repacker" ] || \
     [ ! -f "$openstarbound_staging_path/server_distribution/linux/starbound_server" ] || \
     [ ! -f "$openstarbound_staging_path/server_distribution/assets/opensb.pak" ]; then
    error "OpenStarbound files are missing in staging directory"
    return 1
  fi
  
  # Copy required OpenStarbound files to the Starbound installation path
  cp -f "$openstarbound_staging_path/server_distribution/linux/btree_repacker" "$install_path/linux/"
  cp -f "$openstarbound_staging_path/server_distribution/linux/starbound_server" "$install_path/linux/"
  cp -f "$openstarbound_staging_path/server_distribution/assets/opensb.pak" "$install_path/assets/"
  
  # Make binaries executable
  chmod +x "$install_path/linux/btree_repacker"
  chmod +x "$install_path/linux/starbound_server"
  
  # Update version file
  setOpenStarboundCurrentVersion
  
  info "OpenStarbound Linux Server version $openstarbound_latest_version installed successfully"
  return 0
}

updateOpenStarbound() {
  if [ "$USE_OPENSTARBOUND" != "true" ]; then
    debug "OpenStarbound is disabled, skipping update"
    return 0
  fi
  
  info "Updating OpenStarbound Linux Server..."
  
  # First check if an OpenStarbound update is available
  if ! checkForOpenStarboundUpdates; then
    debug "No OpenStarbound Linux Server update needed"
    return 0
  fi
  
  if fetchOpenStarbound; then
    if installOpenStarbound; then
      info "OpenStarbound Linux Server update completed successfully"
      return 0
    else
      error "Failed to install OpenStarbound Linux Server"
      return 1
    fi
  else
    error "Failed to download OpenStarbound Linux Server"
    return 1
  fi
}

main