#!/bin/bash
. "$(dirname "$0")/common"
. "$(dirname "$0")/defaults"

main() {
  validateEnvironmentVariables
  createFolders
  applyPermissions
  setupSyslog
  steamGuardAuth # Allows for Steam Guard code entry in a pre-Supervisor interactive shell; traversed if 'STEAMGUARD_REQUIRED' is set to "true"
    exit_code=$?

    if [ "$exit_code" -eq 42 ]; then
      error "SteamCMD authentication failed or timed out - terminating deployment and stopping container"
      exit 0  # exit cleanly so that the container 'restart' policy does not count it as a "failure" and stops the container
    elif [ "$exit_code" -ne 0 ]; then
      error "Unexpected error during 'bootstrap' routine (exit code: $exit_code) - restarting container..."
      exit $exit_code  # defer to the container restart policy for all other failures/exit codes
    fi

  exec /usr/bin/supervisord -c /etc/supervisor/supervisord.conf
}

createFolders() {
  info "Creating server folders (save, logs, backup)"

  if [[ -n "$BACKUP_CRON" ]] && [[ -n "$BACKUP_DIR" ]]; then
    if [[ "$BACKUP_DIR" == /* ]]; then
      mkdir -p "$BACKUP_DIR"
    else
      mkdir -p "$install_path/$BACKUP_DIR"
    fi
  fi
}

# Apply user id and group id
applyPermissions() {
  info "Setting uid:gid of starbound to $PUID:$PGID"
  groupmod -g "${PGID}" -o starbound
  usermod -u "${PUID}" -o starbound
  sed -i -E "s/^(starbound:x):[0-9]+:[0-9]+:(.*)/\\1:$PUID:$PGID:\\2/" /etc/passwd

  chown -R starbound:starbound \
    /opt/starbound \
    /home/starbound \
    /var/run/starbound

  if [[ "$BACKUP_DIR" == /* ]]; then
    debug "Setting permissions for $BACKUP_DIR"
    chown -R starbound:starbound "$BACKUP_DIR"
  fi

  chgrp starbound /etc/supervisor/supervisord.conf
}

# Configure syslog
setupSyslog() {
  info "Setting up syslogd - logging to stdout"

  cat >"$rsyslog_conf" <<EOF
\$FileOwner root
\$FileGroup root
\$PrivDropToUser root
\$PrivDropToGroup root

\$template custom,"%timegenerated:1:10:date-rfc3339% %timegenerated:12:23:date-rfc3339% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
\$ActionFileDefaultTemplate custom

:msg, contains, "[session] Pending packets list is full" ~
*.*;cron,auth,authpriv.none /proc/self/fd/1          # send everything to stdout
EOF

  cat >"$supervisor_syslog_conf" <<EOF
[program:rsyslogd]
user=root
environment=HOME="/root",USER="root",LANG="en_US.UTF-8",PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
command=/usr/sbin/rsyslogd -n
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
autostart=true
autorestart=true
priority=10
EOF
}

validateNumericRange() {
  # Validate that the value is a number and optionally within the specified range
  # Usage: validateNumericRange <var_name> <value> [min] [max]
  local var_name="$1"
  local value="$(echo "$2" | xargs)" # trim whitespace
  local min="$3"
  local max="$4"
  
  # Reject empty, non-numeric, or leading-zero (except "0")
  if ! [[ "$value" =~ ^[0-9]+$ ]]; then
    error "$var_name must be a valid number (actual: '$value')"
    exit 1
  fi

  if [[ "$value" =~ ^0[0-9]+$ ]]; then
    error "$var_name must not have leading zeros (actual: '$value')"
    exit 1
  fi
  
  if [ -n "$min" ] && [ "$value" -lt "$min" ]; then
    error "$var_name must be >= $min (actual: '$value')"
    exit 1
  fi
  
  if [ -n "$max" ] && [ "$value" -gt "$max" ]; then
    error "$var_name must be <= $max (actual: '$value')"
    exit 1
  fi
}

validateBoolean() {
  # Validate that the value is a boolean (true/false)
  # Usage: validateBoolean <var_name> <value>
  local var_name="$1"
  local value="$(echo "$2" | tr '[:upper:]' '[:lower:]' | xargs)"
  
  # Reject empty or non-boolean values
  if [[ "$value" != "true" && "$value" != "false" ]]; then
    error "$var_name must be true or false (actual: '$value')"
    exit 1
  fi
}

validateCron() {
  # Validate that the value is a basic cron expression (five space-separated fields)
  # Usage: validateCron <var_name> <value>
  local var_name="$1"
  local value="$2"
  if [[ -z "$value" ]]; then
    error "$var_name must not be empty"
    exit 1
  fi
  
  # Check for five fields
  local field_count
  field_count=$(echo "$value" | awk '{print NF}')
  if [[ "$field_count" -ne 5 ]]; then
    error "$var_name must be a valid cron expression with 5 fields (actual: $value)"
    exit 1
  fi

  # Check allowed characters (digits, *, /, -, , and spaces)
  if ! [[ "$value" =~ ^[0-9\*\-/,\ ]+$ ]]; then
    error "$var_name contains invalid characters for a cron expression (actual: $value)"
    exit 1
  fi
}

validateEnvironmentVariables() {
  if [[ -n "$PUID" ]]; then
    validateNumericRange "PUID" "$PUID"
  fi

  if [[ -n "$PGID" ]]; then
    validateNumericRange "PGID" "$PGID"
  fi

  if [[ -n "$BACKUP_CRON" ]]; then
    validateCron "BACKUP_CRON" "$BACKUP_CRON"
  fi

  if [[ -n "$BACKUP_MAX_COUNT" ]]; then
    validateNumericRange "BACKUP_MAX_COUNT" "$BACKUP_MAX_COUNT" 
  fi

  if [[ -n "$UPDATE_CRON" ]]; then
    validateCron "UPDATE_CRON" "$UPDATE_CRON"
  fi

  if [[ -n "$UPDATE_CHECK_PLAYERS" ]]; then
    validateBoolean "UPDATE_CHECK_PLAYERS" "$UPDATE_CHECK_PLAYERS"
  fi

  if [[ -n "$STEAMGUARD_REQUIRED" ]]; then
    validateBoolean "STEAMGUARD_REQUIRED" "$STEAMGUARD_REQUIRED"
  fi

  if [[ -n "$STEAMGUARD_TIMEOUT" ]]; then
    validateNumericRange "STEAMGUARD_TIMEOUT" "$STEAMGUARD_TIMEOUT" 30 3600
  fi

  if [[ -n "$SERVER_SLOT_COUNT" ]]; then
    validateNumericRange "SERVER_SLOT_COUNT" "$SERVER_SLOT_COUNT" 1 200
  fi

  if [[ -n "$SERVER_PORT" ]]; then
    validateNumericRange "SERVER_PORT" "$SERVER_PORT" 1 65535
  fi

  if [[ -n "$SERVER_QUERYPORT" ]]; then
    validateNumericRange "SERVER_QUERYPORT" "$SERVER_QUERYPORT" 1 65535
  fi

  if [[ -n "$SERVER_RCON_ENABLED" ]]; then
    validateBoolean "SERVER_RCON_ENABLED" "$SERVER_RCON_ENABLED"
  fi

  if [[ -n "$SERVER_RCON_PORT" ]]; then
    validateNumericRange "SERVER_RCON_PORT" "$SERVER_RCON_PORT" 1 65535
  fi

  if [[ -n "$SERVER_CHECK_ASSETS" ]]; then
    validateBoolean "SERVER_CHECK_ASSETS" "$SERVER_CHECK_ASSETS"
  fi

  if [[ -n "$USE_OPENSTARBOUND" ]]; then
    validateBoolean "USE_OPENSTARBOUND" "$USE_OPENSTARBOUND"
  fi
}

main
