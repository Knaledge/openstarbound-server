#!/bin/bash
. "$(dirname "$0")/common"
. "$(dirname "$0")/defaults"
. "$(dirname "$0")/openstarbound-updater"
. "$(dirname "$0")/openstarbound-updater-shared"

pidfile=$starbound_updater_pidfile
latest_version=-1

update() {
  local starbound_update_needed=false
  local openstarbound_update_needed=false

  # PID lock check
  if [ -f "$pidfile" ]; then
    info "Found existing PID file - checking process"
    checkLock $pidfile
  fi
  trap shutdown SIGINT SIGTERM

  # Check for Starbound updates
  if checkForUpdates; then
    starbound_update_needed=true
  fi
  
  # Check for OpenStarbound updates if enabled
  if [ "$USE_OPENSTARBOUND" == "true" ] && checkForOpenStarboundUpdates; then
    openstarbound_update_needed=true
  fi
  
  # If no updates needed, exit
  if [ "$starbound_update_needed" == "false" ] && [ "$openstarbound_update_needed" == "false" ]; then
    if ! checkRunning "starbound-server"; then
      info "Starbound server is not running - starting"
      supervisorctl start starbound-server
    fi
    return
  fi

  # Check if the server is empty
  if ! checkServerEmpty; then
    warn "Starbound server is not empty - update will not be performed"
    return
  fi

# Start update process
  doUpdate "$starbound_update_needed" "$openstarbound_update_needed" &
  starbound_updater_pid=$!
  echo $starbound_updater_pid >"$pidfile"
  wait $starbound_updater_pid
}

doUpdate() {
  local starbound_update_needed=$1
  local openstarbound_update_needed=$2

  updatePreHook
  
  # Check if the server is running and stop it
  if checkRunning "starbound-server"; then
    supervisorctl stop starbound-server
  fi

  # Update Starbound if needed
  if [ "$starbound_update_needed" == "true" ]; then
    info "Updating Starbound..."
    verifyCpuMhz
    if ! downloadStarbound; then
      warn "Download of Starbound server failed - aborting..."
      supervisorctl start starbound-server
      clearLock "$pidfile"
      return
    fi
    setCurrentVersion
  fi

  # Install/update OpenStarbound as needed - especially if Starbound was just installed/updated
  if [ "$USE_OPENSTARBOUND" == "true" ] && ([ "$openstarbound_update_needed" == "true" ] || [ "$starbound_update_needed" == "true" ]); then
    if ! updateOpenStarbound; then
      warn "OpenStarbound update failed - aborting..."
      clearLock "$pidfile"
      return
    fi
  fi

  # Restart the server and run post-update hooks
  supervisorctl start starbound-server
  updatePostHook

  clearLock "$pidfile"
}

# This works around the `Unable to determine CPU Frequency. Try defining CPU_MHZ.` steamcmd issue.
verifyCpuMhz() {
  local float_regex
  local cpu_mhz
  float_regex="^([0-9]+\\.?[0-9]*)\$"
  cpu_mhz=$(grep "^cpu MHz" /proc/cpuinfo | head -1 | cut -d : -f 2 | xargs)
  if [ -n "$cpu_mhz" ] && [[ "$cpu_mhz" =~ $float_regex ]] && [ "${cpu_mhz%.*}" -gt 0 ]; then
    debug "Found CPU with $cpu_mhz MHz"
    unset CPU_MHZ
  else
    debug "Unable to determine CPU Frequency - setting a default of 1.5 GHz so steamcmd won't complain"
    export CPU_MHZ="1500.000"
  fi
}

checkServerEmpty() {
  local connected_players
  if [ "$UPDATE_CHECK_PLAYERS" == "false" ]; then
    return 0
  fi

  connected_players=$(python3 -c "
try:
    import a2s
    print(len(a2s.players(('127.0.0.1',${SERVER_QUERYPORT:-21025}))))
except Exception as e:
    print('null')
")

  debug "[checkServerEmpty] connected_players: $connected_players"
  if [ -n "$connected_players" ] && [ "$connected_players" != "null" ] && [ "$connected_players" -gt 0 ]; then
    return 1
  fi

  return 0
}

setCurrentVersion() {
  if [ "$latest_version" == "null" ] || [ "$latest_version" == "-1" ]; then
    warn "Unable to set current version - latest version is unknown"
    warn "Next update check will restart the server until version can be determined"
    return 1
  fi
  debug "[setCurrentVersion]: $latest_version"
  echo "$latest_version" >"$version_file_path"
}

updatePreHook() {
  if [ -n "$UPDATE_PRE_HOOK" ]; then
    info "Running update post hook: $UPDATE_PRE_HOOK"
    eval "$UPDATE_PRE_HOOK"
  fi
}

updatePostHook() {
  if [ -n "$UPDATE_POST_HOOK" ]; then
    info "Running update post hook: $UPDATE_POST_HOOK"
    eval "$UPDATE_POST_HOOK"
  fi
}

shutdown() {
  debug "Received signal to shut down starbound-updater"
  clearLock "$pidfile"
}
