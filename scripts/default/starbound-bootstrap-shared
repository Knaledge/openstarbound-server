#!/bin/bash
. "$(dirname "$0")/common"
. "$(dirname "$0")/defaults"

prepareStarboundAppFolders() {
  mkdir -p "$install_path"
}

initCrontab() {
  crontab=$(mktemp)

  if [ -n "$UPDATE_CRON" ]; then
    debug "creating cron for update checks (schedule: $UPDATE_CRON)"
    echo "$UPDATE_CRON supervisorctl start starbound-updater >/dev/null 2>&1" >>"$crontab"
  fi

  # if [ -n "$BACKUP_CRON" ]; then
  #   debug "creating cron for backups (schedule: $BACKUP_CRON)"
  #   echo "$BACKUP_CRON supervisorctl start starbound-backup >/dev/null 2>&1" >>"$crontab"
  # fi

  crontab "$crontab"
  rm -f "$crontab"
}

prepareSteamA2sPythonLibrary() {
  pip3 install python-a2s==1.3.0 --break-system-packages
}

bootstrapHook() {
  if [ -n "$BOOTSTRAP_HOOK" ]; then
    info "Running bootstrap hook: $BOOTSTRAP_HOOK"
    eval "$BOOTSTRAP_HOOK"
  fi
}

updateOrCreateStarboundServerConfig() {
  # Check for presence of Starbound server config file
  local starbound_server_config="${install_path}/linux/starbound_server.config"

  if [[ ! -e ${starbound_server_config} ]]; then
    touch ${starbound_server_config}

    # Write server-config environment variable and values as json to Starbound server config file

    cat >${starbound_server_config} << EOF # TODO: Determine which of the follow default config entries are mappable/reusable in Starbound
{  
  "serverName":"Starbound Server",
  "password": "",
  "seed":40377,
  "worldId":0,
  "mapId":0,
  "difficulty":2,
  "worldSize":5,
  "port":21025,
  "queryPort":21025,
  "maxPlayers":10
}
EOF
  fi

  if [[ -n "$SERVER_NAME" ]]; then
    echo "$(jq --arg serverName "$SERVER_NAME" '.serverName = $serverName' ${starbound_server_config})" > ${starbound_server_config}
  fi

  if [[ -n "$SERVER_PORT" ]]; then
    echo "$(jq --argjson port "$SERVER_PORT" '.port = $port' ${starbound_server_config})" > ${starbound_server_config}
  fi

  if [[ -n "$SERVER_QUERYPORT" ]]; then
    echo "$(jq --argjson queryPort "$SERVER_QUERYPORT" '.queryPort = $queryPort' ${starbound_server_config})" > ${starbound_server_config}
  fi

  if [[ -n "$SERVER_RCON_PASSWORD" ]]; then
    echo "$(jq --arg rconServerPassword "$SERVER_RCON_PASSWORD" '.rconServerPassword = $rconServerPassword' ${starbound_server_config})" > ${starbound_server_config}
    info "Starbound RCON password set from Docker secret"
  fi

  if [[ "$SERVER_RCON_ENABLED" == "true" ]]; then
    if [[ -z "$SERVER_RCON_PASSWORD" ]]; then
      info "Starbound RCON server disabled: No Starbound RCON password defined via Docker secret"
      echo "$(jq --arg '.runRconServer = false' ${starbound_server_config})" > ${starbound_server_config}
    else
      echo "$(jq --arg '.runRconServer = true' ${starbound_server_config})" > ${starbound_server_config}
      info "RCON server enabled"
    fi
  else
    echo "$(jq --arg '.runRconServer = false' ${starbound_server_config})" > ${starbound_server_config}
    info "RCON server disabled"
  fi

  if [[ -n "$SERVER_SLOT_COUNT" ]]; then
    echo "$(jq --argjson maxPlayers "$SERVER_SLOT_COUNT" '.maxPlayers = $maxPlayers' ${starbound_server_config})" > ${starbound_server_config}
  fi

}
