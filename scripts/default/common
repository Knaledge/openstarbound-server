#!/bin/bash
steamcmd_path=/usr/bin/steamcmd
steam_app_id=211820
install_path=/opt/starbound
starbound_binary_path=linux/starbound_server
version_file_path=/opt/starbound/current_version
savefile_path=storage/universe # Savefile directory which will be backed up
openstarbound_staging_path=/tmp/openstarbound/staging
openstarbound_download_path=/tmp/openstarbound/download
openstarbound_version_file_path=/opt/starbound/openstarbound/current_version
openstarbound_github_api=https://api.github.com/repos/OpenStarbound/OpenStarbound/releases/latest

# trap SIGUSR1 as it is being used to check
# for process aliveness when an existing
# pidfile is found
trap ':' USR1

# Collection of PID files
starbound_server_pidfile=/var/run/starbound/starbound-server.pid
starbound_updater_pidfile=/var/run/starbound/starbound-updater.pid
starbound_backup_pidfile=/var/run/starbound/starbound-backup.pid

# Syslog supervisor config file
supervisor_syslog_conf=/usr/local/etc/supervisor/conf.d/syslog.conf
rsyslog_conf=/etc/rsyslog.d/stdout.conf

# log levels
debug=50
info=40
warn=30
error=20
critical=10
fatal=5
log_level=${log_level:-$info}

debug() { logstd $debug "DEBUG - [$$] - $*"; }
info() { logstd $info "INFO - $*"; }
warn() { logstd $warn "WARN - $*"; }
error() { logerr $error "ERROR - $*"; }
critical() { logerr $critical "CRITICAL - $*"; }
fatal() {
  logerr $fatal "FATAL - $*"
  exit 1
}

logstd() {
  local log_at_level
  log_at_level="$1"
  shift
  printline "$log_at_level" "$*"
}

logerr() {
  local log_at_level
  log_at_level="$1"
  shift
  printline "$log_at_level" "$*" >&2
}

printline() {
  local log_at_level
  local log_data
  log_at_level="$1"
  shift
  log_data="$*"

  if [ "$log_at_level" -le "$log_level" ]; then
    echo "$log_data"
  fi
}

checkLock() {
  local pidfile
  local predecessor_pid
  local numre
  pidfile=$1
  predecessor_pid=$(<"$pidfile")
  numre='^[0-9]+$'
  if [[ "$predecessor_pid" =~ $numre ]]; then
    debug "Sending SIGUSR1 to PID $predecessor_pid"
    if kill -USR1 "$predecessor_pid" &>/dev/null; then
      fatal "Process with PID $predecessor_pid already running - exiting"
    else
      info "Removing stale PID file and starting run"
      clearLockAndRun "$pidfile"
    fi
  else
    warn "Predecessor PID is corrupt - clearing lock and running"
    clearLockAndRun "$pidfile"
  fi
}

clearLockAndRun() {
  local pidfile
  pidfile=$1
  clearLock "$pidfile"
  main
}

clearLock() {
  local pidfile
  pidfile=$1
  info "Releasing PID file $pidfile"
  kill -SIGTERM $pidfile 2>/dev/null
  rm -f "$1"
}

checkRunning() {
  local proc
  local status
  proc=$1
  status=$(supervisorctl status "${proc}" 2>&1)
  if [[ "$status" == *RUNNING* ]]; then
    return 0
  else
    return 1
  fi
}

steamGuardAuth() {
  if [ "$USE_STEAMGUARD" == "true" ]; then
    info "Steam Guard authentication enabled - beginning interactive SteamCMD login..."

    if [ ! -t 0 ]; then
      # warn "stdin is not a TTY; interactive input may not work! Did you forget to run with -it or tty: true?"
      error "stdin is not a TTY; cannot proceed with interactive Steam Guard login. Exiting."
      exit 1
    fi

    # Check if Steam credentials from Docker secrets are available
    if [ ! -f "/run/secrets/steam_username" ] || [ ! -f "/run/secrets/steam_password" ]; then
      error "Missing Docker secrets: 'steam_username' and/or 'steam_password'"
      exit 1
    fi

    # Read Steam credentials from Docker secrets
    STEAM_USERNAME=$(cat /run/secrets/steam_username)
    STEAM_PASSWORD=$(cat /run/secrets/steam_password)

    # Switch to 'starbound' user and run SteamCMD login logic under that user
    su starbound -c "
      export HOME=/home/starbound
      ATTEMPT=1
      MAX_ATTEMPTS=\${STEAMGUARD_MAX_ATTEMPTS:-3}
      LOGIN_SUCCESS=false

      # Loop to attempt SteamCMD login while Steam Guard is enabled
      while [ \$ATTEMPT -le \$MAX_ATTEMPTS ]; do
        echo \"INFO - SteamCMD login attempt \$ATTEMPT of \$MAX_ATTEMPTS...\"
        if steamcmd +login \"$STEAM_USERNAME\" \"$STEAM_PASSWORD\" +quit; then
          echo \"INFO - SteamCMD authentication with Steam Guard successful - proceeding with install/update of game server...\"
          LOGIN_SUCCESS=true
          break
        else
          echo \"WARN - SteamCMD login failed.\"
          echo \"WARN - If Steam Guard requested, enter code interactively at prompt.\"
        fi
        ATTEMPT=\$((ATTEMPT + 1))
      done

      if [ \"\$LOGIN_SUCCESS\" = false ]; then
        echo \"ERROR - SteamCMD login failed after \$MAX_ATTEMPTS attempts - exiting.\"
        exit 2
      fi
    "

    if [ $? -ne 0 ]; then
      error "SteamCMD login (as starbound) failed or exited with error."
      exit 2
    fi

  else
    info "Steam Guard authentication is disabled - skipping..."
  fi
}
