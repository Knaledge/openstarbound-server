#!/bin/bash
steamcmd_path=/usr/bin/steamcmd
steam_app_id=211820
install_path=/opt/starbound
starbound_binary_path=linux/starbound_server
version_file_path=/opt/starbound/current_version
savefile_path=storage/universe # Savefile directory which will be backed up
openstarbound_staging_path=/tmp/openstarbound/staging
openstarbound_download_path=/tmp/openstarbound/download
openstarbound_version_file_path=/opt/starbound/openstarbound/current_version
openstarbound_github_api=https://api.github.com/repos/OpenStarbound/OpenStarbound/releases/latest
mod_directory=/opt/starbound/mods
modlist_directory=/opt/starbound/modlists
modlist_file=${MODLIST_FILE}
mod_version_file_path=/opt/starbound/modlists/current_versions

# trap SIGUSR1 as it is being used to check
# for process aliveness when an existing
# pidfile is found
trap ':' USR1

# Collection of PID files
starbound_server_pidfile=/var/run/starbound/starbound-server.pid
starbound_updater_pidfile=/var/run/starbound/starbound-updater.pid
starbound_backup_pidfile=/var/run/starbound/starbound-backup.pid
starbound_mod_updater_pidfile=/var/run/starbound/starbound-mod-updater.pid

# Syslog supervisor config file
supervisor_syslog_conf=/usr/local/etc/supervisor/conf.d/syslog.conf
rsyslog_conf=/etc/rsyslog.d/stdout.conf

# log levels
debug=50
info=40
warn=30
error=20
critical=10
fatal=5
log_level=${LOG_LEVEL:-$info}

debug() { logstd $debug "DEBUG - [$$] - $*"; }
info() { logstd $info "INFO - $*"; }
warn() { logstd $warn "WARN - $*"; }
error() { logerr $error "ERROR - $*"; }
critical() { logerr $critical "CRITICAL - $*"; }
fatal() {
  logerr $fatal "FATAL - $*"
  exit 1
}

logstd() {
  local log_at_level
  log_at_level="$1"
  shift
  printline "$log_at_level" "$*"
}

logerr() {
  local log_at_level
  log_at_level="$1"
  shift
  printline "$log_at_level" "$*" >&2
}

printline() {
  local log_at_level
  local log_data
  log_at_level="$1"
  shift
  log_data="$*"

  if [ "$log_at_level" -le "$log_level" ]; then
    echo "$log_data"
  fi
}

checkLock() {
  local pidfile
  local predecessor_pid
  local numre
  pidfile=$1
  predecessor_pid=$(<"$pidfile")
  numre='^[0-9]+$'
  if [[ "$predecessor_pid" =~ $numre ]]; then
    debug "Sending SIGUSR1 to PID $predecessor_pid"
    if kill -USR1 "$predecessor_pid" &>/dev/null; then
      fatal "Process with PID $predecessor_pid already running - exiting"
    else
      info "Removing stale PID file and starting run"
      clearLockAndRun "$pidfile"
    fi
  else
    warn "Predecessor PID is corrupt - clearing lock and running"
    clearLockAndRun "$pidfile"
  fi
}

clearLockAndRun() {
  local pidfile
  pidfile=$1
  clearLock "$pidfile"
  main
}

clearLock() {
  local pidfile
  pidfile=$1
  info "Releasing PID file $pidfile"
  kill -SIGTERM $pidfile 2>/dev/null
  rm -f "$1"
}

checkRunning() {
  local proc
  local status
  proc=$1
  status=$(supervisorctl status "${proc}" 2>&1)
  if [[ "$status" == *RUNNING* ]]; then
    return 0
  else
    return 1
  fi
}

steamGuardAuth() {
  if [ "${STEAMGUARD_REQUIRED,,}" == "true" ]; then
    info "Environment variable 'STEAMGUARD_REQUIRED' is set to 'true' - beginning interactive SteamCMD login..."

    if [ ! -t 0 ]; then
      error "stdin is not interactive/TTY; cannot proceed with interactive Steam Guard login - returning..."
      return 42
    fi

    # Check if Steam credentials from Docker secrets are available
    if [ ! -f "/run/secrets/steam_username" ] || [ ! -f "/run/secrets/steam_password" ]; then
      error "Missing Docker secrets: 'steam_username' and/or 'steam_password'"
      return 42
    fi
    
    # Set environment variable values for SteamCMD authentication and Steam credentials using Docker secrets
    STEAM_USERNAME=$(cat /run/secrets/steam_username)
    STEAM_PASSWORD=$(cat /run/secrets/steam_password)
    STEAMGUARD_TIMEOUT=${STEAMGUARD_TIMEOUT:-300} # Default timeout for Steam Guard authentication before exiting routine

    su starbound -c "
      export HOME=/home/starbound
      echo \"INFO - SteamCMD login...\"
      if timeout \${STEAMGUARD_TIMEOUT} steamcmd +login \"$STEAM_USERNAME\" \"$STEAM_PASSWORD\" +quit; then
        echo \"INFO - SteamCMD authentication successful - proceeding with install/update of game server...\"
        exit 0
      else
        echo \"ERROR - SteamCMD authentication failed or timed out - exiting...\"
        exit 42
      fi
    "

    if [ $? -ne 0 ]; then
      error "SteamCMD authentication (as 'starbound' user) failed or timed out - returning..."
      return 42
    fi

  else
    info "Environment variable 'STEAMGUARD_REQUIRED' is set to 'false' - skipping bootstrap SteamCMD + Steam Guard authentication routine..."
  fi

  return 0
}

setupModlist() {
    local modlist_file="/opt/starbound/modlists/modlist.txt"
    
    info "Setting up mod configuration..."
    
    # Check if modlist.txt exists
    if [ -f "$modlist_file" ]; then
        info "Found modlist.txt file"
        
        # Validate the file is readable
        if [ ! -r "$modlist_file" ]; then
            warn "modlist.txt exists but is not readable"
            return 1
        fi
        
        # Count non-comment, non-empty lines
        local mod_count=$(grep -v '^#' "$modlist_file" | grep -v '^[[:space:]]*$' | wc -l)
        
        if [ "$mod_count" -gt 0 ]; then
            info "Found $mod_count mod(s) configured in modlist.txt"
            return 0
        else
            info "modlist.txt exists but contains no mod IDs"
            return 0
        fi
    else
        info "No modlist.txt found - server will run without mods"
        info "To add mods, create a modlist.txt file in the config directory"
        info "See modlist.txt.example for reference"
        return 0
    fi
}
